<?xml version="1.0" encoding="utf-8"?>
<DuplicatesReport ToolsVersion="8.2">
  <Statistics>
    <CodebaseCost>80192</CodebaseCost>
    <TotalDuplicatesCost>1709</TotalDuplicatesCost>
    <TotalFragmentsCost>3746</TotalFragmentsCost>
  </Statistics>
  <Duplicates>
    <Duplicate Cost="185">
      <Fragment>
        <FileName>..\src\SampleProject.Domain.UnitTests\Accounts\UserPasswordServiceTest.cs</FileName>
        <OffsetRange Start="7145" End="7601" />
        <LineRange Start="171" End="181" />
        <Text>{
            m_target.ChangePassword(3, "33", "Abc123*A");
            m_unitOfWork.Commit();

            var user = m_userService.GetById(3);
            Assert.AreEqual(m_target.Encrypt("Abc123*A"), user.Password);

            var histories = m_historyRepository.FindAll(f =&gt; f.UserId == 3).ToList();
            Assert.AreEqual(1, histories.Count);
            Assert.AreEqual(m_target.Encrypt("Abc123*A"), histories[0].Password);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.Domain.UnitTests\Accounts\UserPasswordServiceTest.cs</FileName>
        <OffsetRange Start="7709" End="8165" />
        <LineRange Start="185" End="195" />
        <Text>{
            m_target.ChangePassword(3, "33", "Abc123*A");
            m_unitOfWork.Commit();

            var user = m_userService.GetById(3);
            Assert.AreEqual(m_target.Encrypt("Abc123*A"), user.Password);

            var histories = m_historyRepository.FindAll(f =&gt; f.UserId == 3).ToList();
            Assert.AreEqual(1, histories.Count);
            Assert.AreEqual(m_target.Encrypt("Abc123*A"), histories[0].Password);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="134">
      <Fragment>
        <FileName>..\src\SampleProject.WebApi\App_Start\IdentityConfig.cs</FileName>
        <OffsetRange Start="727" End="1465" />
        <LineRange Start="20" End="35" />
        <Text>var manager = new ApplicationUserManager(new UserStore&lt;ApplicationUser&gt;(context.Get&lt;ApplicationDbContext&gt;()));
            // Configure validation logic for usernames
            manager.UserValidator = new UserValidator&lt;ApplicationUser&gt;(manager)
            {
                AllowOnlyAlphanumericUserNames = false,
                RequireUniqueEmail = true
            };
            // Configure validation logic for passwords
            manager.PasswordValidator = new PasswordValidator
            {
                RequiredLength = 6,
                RequireNonLetterOrDigit = true,
                RequireDigit = true,
                RequireLowercase = true,
                RequireUppercase = true,
            };</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.WebApp\App_Start\IdentityConfig.cs</FileName>
        <OffsetRange Start="1350" End="2090" />
        <LineRange Start="41" End="57" />
        <Text>var manager = new ApplicationUserManager(new UserStore&lt;ApplicationUser&gt;(context.Get&lt;ApplicationDbContext&gt;()));
            // Configure validation logic for usernames
            manager.UserValidator = new UserValidator&lt;ApplicationUser&gt;(manager)
            {
                AllowOnlyAlphanumericUserNames = false,
                RequireUniqueEmail = true
            };

            // Configure validation logic for passwords
            manager.PasswordValidator = new PasswordValidator
            {
                RequiredLength = 6,
                RequireNonLetterOrDigit = true,
                RequireDigit = true,
                RequireLowercase = true,
                RequireUppercase = true,
            };</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="115">
      <Fragment>
        <FileName>..\src\SampleProject.Domain.UnitTests\Accounts\UserServiceTest.cs</FileName>
        <OffsetRange Start="6436" End="6684" />
        <LineRange Start="174" End="177" />
        <Text>Assert.AreEqual(0, m_target.Get(0, int.MaxValue, f =&gt; true).TotalCount);
            m_userRepository.Add(new User() { UserName = "TEST1" });
            m_userRepository.Add(new User() { UserName = "TEST2" });
            m_unitOfWork.Commit();</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.Domain.UnitTests\Accounts\UserServiceTest.cs</FileName>
        <OffsetRange Start="7435" End="7683" />
        <LineRange Start="197" End="200" />
        <Text>Assert.AreEqual(0, m_target.Get(0, int.MaxValue, f =&gt; true).TotalCount);
            m_userRepository.Add(new User() { UserName = "TEST1" });
            m_userRepository.Add(new User() { UserName = "TEST2" });
            m_unitOfWork.Commit();</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="113">
      <Fragment>
        <FileName>..\src\SampleProject.Domain.UnitTests\Accounts\UserPasswordServiceTest.cs</FileName>
        <OffsetRange Start="8291" End="8593" />
        <LineRange Start="200" End="206" />
        <Text>var token2 = new UserPasswordResetToken() { Code = Guid.NewGuid(), UserId = 2 };
            m_tokenRepository.Add(token2);

            var token3 = new UserPasswordResetToken() { Code = Guid.NewGuid(), UserId = 3 };
            m_tokenRepository.Add(token3);

            m_unitOfWork.Commit();</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.Domain.UnitTests\Accounts\UserPasswordServiceTest.cs</FileName>
        <OffsetRange Start="9215" End="9517" />
        <LineRange Start="223" End="229" />
        <Text>var token2 = new UserPasswordResetToken() { Code = Guid.NewGuid(), UserId = 2 };
            m_tokenRepository.Add(token2);

            var token3 = new UserPasswordResetToken() { Code = Guid.NewGuid(), UserId = 3 };
            m_tokenRepository.Add(token3);

            m_unitOfWork.Commit();</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="112">
      <Fragment>
        <FileName>..\src\SampleProject.Specs\Features\Sample1.feature.cs</FileName>
        <OffsetRange Start="5244" End="5510" />
        <LineRange Start="113" End="115" />
        <Text>testRunner.When("clico no botão \'Register new\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 27
 testRunner.Then("não deve exibir o texto \'The Email field is required\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.Specs\Features\Sample1.feature.cs</FileName>
        <OffsetRange Start="5801" End="6067" />
        <LineRange Start="121" End="123" />
        <Text>testRunner.When("clico no botão \'Register new\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 32
 testRunner.Then("não deve exibir o texto \'The Email field is required\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="111">
      <Fragment>
        <FileName>..\src\SampleProject.Infrastructure.Framework.UnitTests\Domain\MoneyExtensionsTest.cs</FileName>
        <OffsetRange Start="660" End="907" />
        <LineRange Start="24" End="29" />
        <Text>var source = new List&lt;MoneyStub&gt;()
            {
                new MoneyStub() { Value = Money.Reais(1) },
                new MoneyStub() { Value = Money.Reais(2) },
                new MoneyStub() { Value = Money.Reais(3) }
            };</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.Infrastructure.Framework.UnitTests\Domain\MoneyExtensionsTest.cs</FileName>
        <OffsetRange Start="1476" End="1723" />
        <LineRange Start="51" End="56" />
        <Text>var source = new List&lt;MoneyStub&gt;()
            {
                new MoneyStub() { Value = Money.Reais(1) },
                new MoneyStub() { Value = Money.Reais(2) },
                new MoneyStub() { Value = Money.Reais(3) }
            };</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="109">
      <Fragment>
        <FileName>..\src\SampleProject.Infrastructure.Framework.UnitTests\Domain\DomainServiceBaseTest.cs</FileName>
        <OffsetRange Start="336" End="688" />
        <LineRange Start="12" End="18" />
        <Text>var unitOfWork = new MemoryUnitOfWork();
            var repository = new MemoryDomainServiceBaseStubRepository(unitOfWork);
            repository.Add(new DomainEntityBaseStub());
            repository.Add(new DomainEntityBaseStub());
            unitOfWork.Commit();

            var target = new DomainServiceBaseStub(repository, unitOfWork);</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.Infrastructure.Framework.UnitTests\Domain\DomainServiceBaseTest.cs</FileName>
        <OffsetRange Start="911" End="1263" />
        <LineRange Start="26" End="32" />
        <Text>var unitOfWork = new MemoryUnitOfWork();
            var repository = new MemoryDomainServiceBaseStubRepository(unitOfWork);
            repository.Add(new DomainEntityBaseStub());
            repository.Add(new DomainEntityBaseStub());
            unitOfWork.Commit();

            var target = new DomainServiceBaseStub(repository, unitOfWork);</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.Infrastructure.Framework.UnitTests\Domain\DomainServiceBaseTest.cs</FileName>
        <OffsetRange Start="1490" End="1842" />
        <LineRange Start="40" End="46" />
        <Text>var unitOfWork = new MemoryUnitOfWork();
            var repository = new MemoryDomainServiceBaseStubRepository(unitOfWork);
            repository.Add(new DomainEntityBaseStub());
            repository.Add(new DomainEntityBaseStub());
            unitOfWork.Commit();

            var target = new DomainServiceBaseStub(repository, unitOfWork);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="107">
      <Fragment>
        <FileName>..\src\SampleProject.WebApi\App_Start\BundleConfig.cs</FileName>
        <OffsetRange Start="652" End="1104" />
        <LineRange Start="15" End="24" />
        <Text>bundles.Add(new ScriptBundle("~/bundles/modernizr").Include(
                        "~/Scripts/modernizr-*"));

            bundles.Add(new ScriptBundle("~/bundles/bootstrap").Include(
                      "~/Scripts/bootstrap.js",
                      "~/Scripts/respond.js"));

            bundles.Add(new StyleBundle("~/Content/css").Include(
                      "~/Content/bootstrap.css",
                      "~/Content/site.css"));</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.WebApp\App_Start\BundleConfig.cs</FileName>
        <OffsetRange Start="785" End="1237" />
        <LineRange Start="18" End="27" />
        <Text>bundles.Add(new ScriptBundle("~/bundles/modernizr").Include(
                        "~/Scripts/modernizr-*"));

            bundles.Add(new ScriptBundle("~/bundles/bootstrap").Include(
                      "~/Scripts/bootstrap.js",
                      "~/Scripts/respond.js"));

            bundles.Add(new StyleBundle("~/Content/css").Include(
                      "~/Content/bootstrap.css",
                      "~/Content/site.css"));</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="105">
      <Fragment>
        <FileName>..\src\SampleProject.Domain.UnitTests\Accounts\UserPasswordServiceTest.cs</FileName>
        <OffsetRange Start="3629" End="3892" />
        <LineRange Start="80" End="84" />
        <Text>var token = m_target.GeneratePasswordResetToken(user.Email);
            m_unitOfWork.Commit();
            Assert.AreEqual(1, token.UserId);
            Assert.AreEqual(DateTime.UtcNow.Date, token.Created.Date.Date);
            Assert.IsNotNull(token.Code);</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.Domain.UnitTests\Accounts\UserPasswordServiceTest.cs</FileName>
        <OffsetRange Start="4586" End="4851" />
        <LineRange Start="99" End="104" />
        <Text>var token = m_target.GeneratePasswordResetToken(user.Email);
            m_unitOfWork.Commit();

            Assert.AreEqual(1, token.UserId);
            Assert.AreEqual(DateTime.UtcNow.Date, token.Created.Date.Date);
            Assert.IsNotNull(token.Code);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="103">
      <Fragment>
        <FileName>..\src\SampleProject.Infrastructure.Framework.UnitTests\Commons\RangeValueTest.cs</FileName>
        <OffsetRange Start="1464" End="1730" />
        <LineRange Start="46" End="52" />
        <Text>var date = DateTime.UtcNow.Date;
            var target = new RangeValue&lt;DateTime&gt;();
            target.StartValue = date;
            target.EndValue = date.AddDays(1);

            var other = new RangeValue&lt;DateTime&gt;();
            other.StartValue = date;</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.Infrastructure.Framework.UnitTests\Commons\RangeValueTest.cs</FileName>
        <OffsetRange Start="2474" End="2740" />
        <LineRange Start="79" End="85" />
        <Text>var date = DateTime.UtcNow.Date;
            var target = new RangeValue&lt;DateTime&gt;();
            target.StartValue = date;
            target.EndValue = date.AddDays(1);

            var other = new RangeValue&lt;DateTime&gt;();
            other.StartValue = date;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="94">
      <Fragment>
        <FileName>..\src\SampleProject.Infrastructure.Framework.UnitTests\Domain\NamedEntityEqualityComparerTest.cs</FileName>
        <OffsetRange Start="760" End="989" />
        <LineRange Start="22" End="26" />
        <Text>var target = new NamedEntityEqualityComparer();
            var a = MockRepository.GenerateMock&lt;INamedEntity&gt;();
            a.Expect(e =&gt; e.Name).Return("a");

            var b = MockRepository.GenerateMock&lt;INamedEntity&gt;();</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.Infrastructure.Framework.UnitTests\Domain\NamedEntityEqualityComparerTest.cs</FileName>
        <OffsetRange Start="1195" End="1424" />
        <LineRange Start="35" End="39" />
        <Text>var target = new NamedEntityEqualityComparer();
            var a = MockRepository.GenerateMock&lt;INamedEntity&gt;();
            a.Expect(e =&gt; e.Name).Return("a");

            var b = MockRepository.GenerateMock&lt;INamedEntity&gt;();</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="92">
      <Fragment>
        <FileName>..\src\SampleProject.WebApi\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs</FileName>
        <OffsetRange Start="4322" End="4622" />
        <LineRange Start="96" End="99" />
        <Text>string controllerName = api.ActionDescriptor.ControllerDescriptor.ControllerName;
            string actionName = api.ActionDescriptor.ActionName;
            IEnumerable&lt;string&gt; parameterNames = api.ParameterDescriptions.Select(p =&gt; p.Name);
            Collection&lt;MediaTypeFormatter&gt; formatters;</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.WebApi\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs</FileName>
        <OffsetRange Start="10933" End="11233" />
        <LineRange Start="217" End="220" />
        <Text>string controllerName = api.ActionDescriptor.ControllerDescriptor.ControllerName;
            string actionName = api.ActionDescriptor.ActionName;
            IEnumerable&lt;string&gt; parameterNames = api.ParameterDescriptions.Select(p =&gt; p.Name);
            Collection&lt;MediaTypeFormatter&gt; formatters;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="91">
      <Fragment>
        <FileName>..\src\SampleProject.WebApi\App_Start\RouteConfig.cs</FileName>
        <OffsetRange Start="84" End="519" />
        <LineRange Start="5" End="19" />
        <Text>{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute(
                name: "Default",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
            );
        }
    }
}</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.WebApp\App_Start\RouteConfig.cs</FileName>
        <OffsetRange Start="84" End="519" />
        <LineRange Start="5" End="19" />
        <Text>{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute(
                name: "Default",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
            );
        }
    }
}</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="89">
      <Fragment>
        <FileName>..\src\SampleProject.WebApp\Controllers\ManageController.cs</FileName>
        <OffsetRange Start="5101" End="5390" />
        <LineRange Start="139" End="144" />
        <Text>var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
            if (user != null)
            {
                await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
            }
            return RedirectToAction("Index", "Manage");</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.WebApp\Controllers\ManageController.cs</FileName>
        <OffsetRange Start="5718" End="6007" />
        <LineRange Start="154" End="159" />
        <Text>var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
            if (user != null)
            {
                await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
            }
            return RedirectToAction("Index", "Manage");</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="76">
      <Fragment>
        <FileName>..\src\SampleProject.Domain.UnitTests\Accounts\RoleServiceTest.cs</FileName>
        <OffsetRange Start="2032" End="2206" />
        <LineRange Start="64" End="65" />
        <Text>m_target.Save(new Role() { Name = "TESTE", Description = "4d5sf4ad32423%$@", Permissions = new List&lt;Permission&gt;() { new Permission() } });
            m_unitOfWork.Commit();</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.Domain.UnitTests\Accounts\RoleServiceTest.cs</FileName>
        <OffsetRange Start="2652" End="2826" />
        <LineRange Start="76" End="77" />
        <Text>m_target.Save(new Role() { Name = "TESTE", Description = "4d5sf4ad32423%$@", Permissions = new List&lt;Permission&gt;() { new Permission() } });
            m_unitOfWork.Commit();</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="73">
      <Fragment>
        <FileName>..\src\SampleProject.WebApp\Controllers\ManageController.cs</FileName>
        <OffsetRange Start="3189" End="3437" />
        <LineRange Start="87" End="91" />
        <Text>var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                if (user != null)
                {
                    await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                }</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.WebApp\Controllers\ManageController.cs</FileName>
        <OffsetRange Start="7018" End="7266" />
        <LineRange Start="184" End="188" />
        <Text>var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                if (user != null)
                {
                    await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                }</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.WebApp\Controllers\ManageController.cs</FileName>
        <OffsetRange Start="7964" End="8196" />
        <LineRange Start="205" End="209" />
        <Text>var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
            if (user != null)
            {
                await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.WebApp\Controllers\ManageController.cs</FileName>
        <OffsetRange Start="8970" End="9218" />
        <LineRange Start="233" End="237" />
        <Text>var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                if (user != null)
                {
                    await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                }</Text>
      </Fragment>
      <Fragment>
        <FileName>..\src\SampleProject.WebApp\Controllers\ManageController.cs</FileName>
        <OffsetRange Start="10005" End="10269" />
        <LineRange Start="262" End="266" />
        <Text>var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                    if (user != null)
                    {
                        await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                    }</Text>
      </Fragment>
    </Duplicate>
  </Duplicates>
</DuplicatesReport>